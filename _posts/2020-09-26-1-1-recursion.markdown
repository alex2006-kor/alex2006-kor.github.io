---
layout: post
title: 1-1 Recursion
date: 2020-09-26 13:25:20 +0300
description: Algorithm 1-1 Recursion
img: learning/algorithm.png
category: [Learning]
tags: [Algorithm, Recursion]
author: Alex2006
---
  
  
------
## 1-1 Recursion   
### Resursion : 자기 자신을 호출(재귀호출)   
{% highlight c %}
void func(...) {
    func(...); // Infinite loop에 빠지지 않도록 최소 1개의 Base case(기저)가 있어야 한다.
}
{% endhighlight %}
   
### Recursion의 구성   
* Base case
  * 적어도 하나의 Recursion에 빠지지 않는 Case가 존재해야 한다.   
* Recursion case
  * Recursion을 수행하다 보면 결국 Base case로 수렴 해야한다.   
{% highlight c %}
void func(int k) {
    if (k <= 0) {
        return;      // Base case
    }
    else {
        printf("%d", k);
        func(k - 1); // Recursion
    }
}
{% endhighlight %}    
    
#### Example)
* 1~n까지의 수 더하기
{% highlight c %}
int func(int n) {
   if(n == 0) return 0;         // n이 0이라면 합은 0이다.
   else return n + func(n - 1); // n이 0보다 크면 0~n까지의 합은 0~n-1까지의 합 + n 이다.
}
{% endhighlight %}
> __증명__   
a) n = 0 인 경우 0을 return한다.   
b) 임의의 양의 정수 k에 대해서 n < k 인 경우 0~n 까지의 합을 올바르게 계산한다고 가정.   
c) n = k 인 경우 func(k-1)을 호출 -> 2.의 가정에 의해 0~k-1까지 합을 올바르게 구한다.   
d) func는 이 값에 n을 더해 반환하므로 OK.   
    
    
* Factorial   
{% highlight c %}
int factorial(int n) {
   if(n == 0) return 1;
   else return n * factorial(n - 1);
}
{% endhighlight %}
> 
0! = 1   
n! = n*(n - 1)! (n > 0)   
    
    
* Fibonachi   
{% highlight c %}
int fibonachi(int n) {
   if(n < 2) return n;
   else return fibonachi(n - 1) * fibonachi(n - 2);
}
{% endhighlight %}
> 
f<sub>0</sub> = 0    
f<sub>1</sub> = 1   
f<sub>2</sub> = f<sub>n-1</sub> + f<sub>n-2</sub>
    
    
* G.C.D     
{% highlight c %}
   if(q == 2) return p;
   else return GCD(q, p%q);
   
   if(m < n) swap(m, n);
   if(m%n == 0) return n;
   else return GCD(n, m%n);
{% endhighlight %}
> 
p (q ==0)    
GCD(q, p%q) otherwise    
    
    

### Recursive thinking
#### Example)
* 문자열 계산하기   

### Designing recursive
#### Example)
* 순차탐색   
* Binary search

### Example
#### Maze
#### Counting cells in a blob
#### N-Queens
#### Power set

**<center><span style="color:navy">Recursion</span></center>**  

------
