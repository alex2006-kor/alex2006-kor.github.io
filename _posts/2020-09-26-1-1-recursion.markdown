---
layout: post
title: 1-1 Recursion
date: 2020-09-26 13:25:20 +0300
description: Algorithm 1-1 Recursion
img: learning/algorithm.png
category: [Learning]
tags: [Algorithm, Recursion]
author: Alex2006
---
  
  
------
## 1-1 Recursion   
### Resursion : 자기 자신을 호출(재귀호출)   
```{.cpp}
void func(...) {
    func(...); // Infinite loop에 빠지지 않도록 최소 1개의 Base case(기저)가 있어야 한다.
}
```
   
### Recursion의 구성   
* Base case
  * 적어도 하나의 Recursion에 빠지지 않는 Case가 존재해야 한다.   
* Recursion case
  * Recursion을 수행하다 보면 결국 Base case로 수렴 해야한다.   
```{.cpp}
void func(int k) {
    if (k <= 0) {
        return;      // Base case
    }
    else {
        printf("%d", k);
        func(k - 1); // Recursion
    }
}
```
    
#### Example)
* 1~n까지의 수 더하기
```{.cpp}
int func(int n) {
   if(n == 0) return 0;         // n이 0이라면 합은 0이다.
   else return n + func(n - 1); // n이 0보다 크면 0~n까지의 합은 0~n-1까지의 합 + n 이다.
}
```
> __증명__   
a) n = 0 인 경우 0을 return한다.   
b) 임의의 양의 정수 k에 대해서 n < k 인 경우 0~n 까지의 합을 올바르게 계산한다고 가정.   
c) n = k 인 경우 func(k-1)을 호출 -> 2.의 가정에 의해 0~k-1까지 합을 올바르게 구한다.   
d) func는 이 값에 n을 더해 반환하므로 OK.   
    
    
    
* Factorial   
```{.cpp}
int factorial(int n) {
   if(n == 0) return 1;
   else return n * factorial(n - 1);
}
```
> 
0! = 1   
n! = n*(n - 1)! (n > 0)    
    
	
    
* Fibonachi   
```{.cpp}
int fibonachi(int n) {
   if(n < 2) return n;
   else return fibonachi(n - 1) * fibonachi(n - 2);
}
```
> 
f<sub>0</sub> = 0    
f<sub>1</sub> = 1   
f<sub>2</sub> = f<sub>n-1</sub> + f<sub>n-2</sub>
    
    
    
* G.C.D     
```{.cpp}
   if(q == 2) return p;
   else return GCD(q, p%q);
   
   if(m < n) swap(m, n);
   if(m%n == 0) return n;
   else return GCD(n, m%n);
```
> 
p (q ==0)    
GCD(q, p%q) otherwise
	
    
### Recursive thinking    
#### Example)
* 문자열 계산하기    
  * "[0] + [1]~~[n]" == "1  + 문자열 길이" == "총 문자열의 길이"    
  * Idea : 첫번째 글자부터 하나씩 차례대로 세어 나간다. == 총 문자열의 길이는 첫번째 문자를 제외한 문자열 길이 + 1    
```{.cpp}
int StringLength(string str) {
   if(str == "") return 0;
   else return StringLength(Substr(str, 1)) + 1;
}
```
* 모든 Recursion은 Iteration으로 변경 가능
* 그 역도 성립하므로 즉 Iteration은 Recursion으로 변경 가능
  * <span style="color:blue">알고리즘을 단순하고 명쾌하게 표현가능하나 함수 호출에 대한 Overhead가 발생.</span>
	
    
### Designing recursive
#### <span style="color:red">적어도 하나의 Base case,</span> 즉 순환되지 않고 종료되는 Case가 존재해야 한다.
#### 모든 Case는 결국 Base case로 <span style="color:red">수렴</span>해야 한다.
#### <span style="color:blue">암시적(Implicit) 매개변수를</span><span style="color:red"> 명시적(explicit)으로 바꾸어 사용한다.</span>
#### Example)
* 순차탐색

>
iteration case    
데이터의 범위에 대해 시작 index 0은 생략(n만 존재) -> 암시적 매개변수
```{.cpp}
int search(int[] data, int n, int target) {
   for(int i=0; i<n; i++)
      if(data[i] == target) return i;
   return -1;
}
```
>
recursion case    
데이터의 범위에 대해 시작(begin)과 끝(end)을 명시 -> 명시적 매개변수
```{.cpp}
int search(int[] data, int begin, int end, int target) {
   if(begin > end) return -1;
   else if(target == data[begin]) return begin;
   else return search(data, begin + 1, end, ratget);
}
```
   
   
* Binary search
```{.cpp}
int BinarySearch(int[] items, int begin, int end, int target) {
   if(begin > end) return -1;
   else {
      int mid = (begin + end) / 2, cmpRes = target.CompareTo(items[mid]);
	  
	  if(cmpRes ==0) return mid;
	  else if(cmpRes < 0) return binarySearch(items, begin, mid-1, target);
	  else return bianrySearch(items, mid+1, end, target);
   }
}
```
    
    
    
### Example
#### Maze
#### Counting cells in a blob
#### N-Queens
#### Power set

**<center><span style="color:navy">Recursion</span></center>**  

------
